// <auto-generated />
using System;
using FileShare.DataAccess.Models.Primary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileShare.DataAccess.Migrations
{
    [DbContext(typeof(PrimaryContext))]
    [Migration("20220804113650_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DocumentShare", b =>
                {
                    b.Property<Guid>("DocumentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SharesId")
                        .HasColumnType("char(36)");

                    b.HasKey("DocumentsId", "SharesId");

                    b.HasIndex("SharesId");

                    b.ToTable("DocumentShare");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Account.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Address.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AdditionalStreet")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.DeviceToken.DeviceToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LoginId");

                    b.ToTable("DeviceTokens", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Document.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Contents")
                        .IsRequired()
                        .HasColumnType("LONGBLOB");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Json")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.DocumentDetail.DocumentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Extention")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DocumentDetails", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.DocumentSignature.DocumentSignature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DocumentSignatures", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Email.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Email");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.EmailVerificationCode.EmailVerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("EmailId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("EmailVerificationCode");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Login.Login", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Login");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.LoginDetail.LoginDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LoginId");

                    b.ToTable("LoginDetails", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.PhoneNumber.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.PhoneNumberVerificationCode.PhoneNumberVerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PhoneNumberId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PhoneNumberId")
                        .IsUnique();

                    b.ToTable("PhoneNumberVerificationCode");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.RefreshToken.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LoginId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Share.Share", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Shares", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.ShareDetail.ShareDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("ShareId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ShareId");

                    b.ToTable("ShareDetails", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.SocialSecurityNumber.SocialSecurityNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("SocialSecurityNumbers", (string)null);
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Middlenames")
                        .HasMaxLength(768)
                        .HasColumnType("varchar(768)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("DocumentShare", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Document.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileShare.DataAccess.Models.Primary.Share.Share", null)
                        .WithMany()
                        .HasForeignKey("SharesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Address.Address", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithOne("Address")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.Address.Address", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.DeviceToken.DeviceToken", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Login.Login", "Login")
                        .WithMany("DeviceTokens")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Document.Document", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithMany("Documents")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.DocumentDetail.DocumentDetail", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Document.Document", "Document")
                        .WithOne("Detail")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.DocumentDetail.DocumentDetail", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.DocumentSignature.DocumentSignature", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Document.Document", "Document")
                        .WithMany("Signatures")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Email.Email", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithOne("Email")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.Email.Email", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.EmailVerificationCode.EmailVerificationCode", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithOne("EmailVerificationCode")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.EmailVerificationCode.EmailVerificationCode", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileShare.DataAccess.Models.Primary.Email.Email", "Email")
                        .WithOne("EmailVerificationCode")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.EmailVerificationCode.EmailVerificationCode", "EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Login.Login", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithOne("Login")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.Login.Login", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.LoginDetail.LoginDetail", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Login.Login", "Login")
                        .WithMany("LoginDetails")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.PhoneNumber.PhoneNumber", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithOne("PhoneNumber")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.PhoneNumber.PhoneNumber", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.PhoneNumberVerificationCode.PhoneNumberVerificationCode", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithOne("PhoneNumberVerificationCode")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.PhoneNumberVerificationCode.PhoneNumberVerificationCode", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileShare.DataAccess.Models.Primary.PhoneNumber.PhoneNumber", "PhoneNumber")
                        .WithOne("PhoneNumberVerificationCode")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.PhoneNumberVerificationCode.PhoneNumberVerificationCode", "PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.RefreshToken.RefreshToken", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Login.Login", "Login")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Share.Share", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithMany("Shares")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.ShareDetail.ShareDetail", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Share.Share", "Share")
                        .WithMany("ShareDetails")
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Share");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.SocialSecurityNumber.SocialSecurityNumber", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithMany("SocialSecurityNumbers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.User.User", b =>
                {
                    b.HasOne("FileShare.DataAccess.Models.Primary.Account.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("FileShare.DataAccess.Models.Primary.User.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Account.Account", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Documents");

                    b.Navigation("Email");

                    b.Navigation("EmailVerificationCode");

                    b.Navigation("Login");

                    b.Navigation("PhoneNumber");

                    b.Navigation("PhoneNumberVerificationCode");

                    b.Navigation("Shares");

                    b.Navigation("SocialSecurityNumbers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Document.Document", b =>
                {
                    b.Navigation("Detail");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Email.Email", b =>
                {
                    b.Navigation("EmailVerificationCode");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Login.Login", b =>
                {
                    b.Navigation("DeviceTokens");

                    b.Navigation("LoginDetails");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.PhoneNumber.PhoneNumber", b =>
                {
                    b.Navigation("PhoneNumberVerificationCode");
                });

            modelBuilder.Entity("FileShare.DataAccess.Models.Primary.Share.Share", b =>
                {
                    b.Navigation("ShareDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
